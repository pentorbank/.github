name: Build And Deploy

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

env:
  AWS_REGION: ap-southeast-1
  SERVICE_NAME: example-action

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      image-tag: ${{ steps.tag-version.outputs.tag }}

    steps:
      - name: Retrieve secret from Vault
        id: vault
        uses: hashicorp/vault-action@v3.0.0
        with:
          url: ${{ secrets.VAULT_ADDR_NONPROD }}
          method: jwt
          path: gha
          role: ${{ secrets.VAULT_ROLE_NONPROD }}
          namespace: ${{ secrets.VAULT_NAMESPACE_NONPROD }}
          secrets: |
            secrets/data/github/ptc-github app_id | APP_ID ;
            secrets/data/github/ptc-github app_private_key | APP_PRIVATE_KEY ;

      - name: Generate token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ steps.vault.outputs.APP_ID }}
          private-key: ${{ steps.vault.outputs.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout actions
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/.github
          token: ${{ steps.app-token.outputs.token }}
          path: ./.github

      - name: Get Tag version
        id: tag-version
        uses: ./.github/actions/filter-tag

      - name: Container Build
        id: build
        uses: ./.github/actions/container-build
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          repository: ${{ env.SERVICE_NAME }}
          tag: ${{ steps.tag-version.outputs.tag }}
          container-scan: true
          aqua-username: ${{ secrets.AQUA_USERNAME }}
          aqua-password: ${{ secrets.AQUA_PASSWORD }}
          aqua-scanner-token: ${{ secrets.AQUA_SCANNER_TOKEN }}
          aqua-scanner-host: ${{ secrets.AQUA_SCANNER_HOST }}

  argocd-sync:
    needs: ["build"]
    runs-on: ubuntu-latest

    steps:
      - name: Retrieve secret from Vault
        id: vault
        uses: hashicorp/vault-action@v3.0.0
        with:
          url: ${{ secrets.VAULT_ADDR_NONPROD }}
          method: jwt
          path: gha
          role: ${{ secrets.VAULT_ROLE_NONPROD }}
          namespace: ${{ secrets.VAULT_NAMESPACE_NONPROD }}
          secrets: |
            secrets/data/github/ptc-github app_id | APP_ID ;
            secrets/data/github/ptc-github app_private_key | APP_PRIVATE_KEY ;

      - name: Generate token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ steps.vault.outputs.APP_ID }}
          private-key: ${{ steps.vault.outputs.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout actions
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/.github
          token: ${{ steps.app-token.outputs.token }}
          path: ./.github

      - name: Generate git token and user
        id: git
        uses: ./.github/actions/vault-github-app
        with:
          vault-addr: ${{ secrets.VAULT_ADDR_NONPROD }}
          vault-role: ${{ secrets.VAULT_ROLE_NONPROD }}
          vault-namespace: ${{ secrets.VAULT_NAMESPACE_NONPROD }}

      - name: Argocd patch and sync
        uses: ./.github/actions/argocd
        with:
          gh_token: ${{ steps.git.outputs.token }}
          repository: "example-gitops"
          bot-username: ${{ steps.git.outputs.user-name }}
          bot-email: ${{ steps.git.outputs.user-email }}
          service-name: ${{ env.SERVICE_NAME }}
          image-tag: ${{ needs.build.outputs.image-tag }}
          path: "config/${{ env.SERVICE_NAME }}/values.yml"
